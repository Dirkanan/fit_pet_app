from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from keyboards.reply_keyboards import *
from keyboards.inline_keyboards import kb_line, formulasses, activity_keyboard, profile_keyboard
from states.user_states import RegistrationState, UserState, RegistrationExercise
from crud_functions import *
import asyncio
from config import BOT_TOKEN
from utils.messages import MESSAGES
from utils.bad_words import forbidden_words
from better_profanity import profanity
import re


if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

user_last_data = {}

@dp.message(Command(commands=['start']))
async def start_commands(message: types.Message):
    if user_exists(message.from_user.id):
        await message.answer(MESSAGES["start"], reply_markup=kb_registered, parse_mode="HTML")
    else:
        await message.answer(MESSAGES["start"], reply_markup=kb, parse_mode="HTML")


@dp.message(F.text == 'üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def sing_up(message: types.Message, state: FSMContext):
    if user_exists(message.from_user.id):
        await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    await message.answer(MESSAGES["registration_start"], parse_mode="HTML")
    await state.set_state(RegistrationState.username)

@dp.message(StateFilter(RegistrationState.username))
async def set_username(message: types.Message, state: FSMContext):
    username = message.text

    is_valid, error_msg = is_valid_username(username)
    if not is_valid:
        await message.reply(error_msg, parse_mode="HTML")
        return

    bool_name = is_included(username)
    if bool_name:
        await message.reply(MESSAGES["user_exists"], parse_mode="HTML")
        return

    await state.update_data(username=username)
    await state.set_state(RegistrationState.email)
    await message.reply(MESSAGES["enter_email"], parse_mode="HTML")


@dp.message(StateFilter(RegistrationState.email))
async def set_email(message: types.Message, state: FSMContext):
    email = message.text
    is_valid, error_msg = is_valid_email(email)
    if not is_valid:
        await message.reply(error_msg, parse_mode="HTML")
        return
    await state.update_data(email=email)
    await state.set_state(RegistrationState.age)
    await message.reply(MESSAGES["enter_age"], parse_mode="HTML")


@dp.message(StateFilter(RegistrationState.age))
async def set_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 0 or age > 150:
            await message.reply(MESSAGES["age_fail"], parse_mode="HTML")
            return
    except ValueError:
        await message.reply(MESSAGES["invalid_number"], parse_mode="HTML")
        return

    data = await state.get_data()
    username = data.get('username')
    email = data.get('email')
    telegram_id = message.from_user.id
    add_user(username, email, age, telegram_id)
    await message.reply(MESSAGES["registration_success"], parse_mode="HTML")
    await message.answer(MESSAGES["start"], reply_markup=kb_registered, parse_mode="HTML")
    await state.clear()


@dp.message(F.text == 'üßÆ –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å')
async def main_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb_line, parse_mode="HTML")


@dp.callback_query(F.data == 'calories')
async def calories_callback(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(MESSAGES["calorie_calc_start"], parse_mode="HTML")
    await call.answer()
    await state.set_state(UserState.age)


@dp.callback_query(F.data == 'formulas')
async def get_formulas(call: types.CallbackQuery):
    await call.message.answer(MESSAGES["formulas"], parse_mode="HTML")
    await call.answer()


@dp.message(StateFilter(UserState.age))
async def set_age_for_calories(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 0 or age > 150:
            await message.reply(MESSAGES["age_fail"], parse_mode="HTML")
            return
    except ValueError:
        await message.reply(MESSAGES["invalid_number"], parse_mode="HTML")
        return

    await state.update_data(age=age)

    user_id = message.from_user.id
    if user_id not in user_last_data:
        user_last_data[user_id] = {}
    user_last_data[user_id]['age'] = age

    await message.answer(MESSAGES['enter_gender'], parse_mode="HTML")
    await state.set_state(UserState.sex)


@dp.message(StateFilter(UserState.sex))
async def set_sex(message: types.Message, state: FSMContext):
    try:
        sex_input = int(message.text)
        if sex_input not in [1, 2]:
            await message.reply(MESSAGES['enter_gender'], parse_mode="HTML")
            return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2:")
        return

    sex_value = 5 if sex_input == 1 else -161
    await state.update_data(sex=sex_value)

    user_id = message.from_user.id
    user_last_data[user_id]['sex'] = '–ú—É–∂—Å–∫–æ–π' if sex_value == 5 else '–ñ–µ–Ω—Å–∫–∏–π'

    await message.answer(MESSAGES['enter_height'], parse_mode="HTML")
    await state.set_state(UserState.growth)


@dp.message(StateFilter(UserState.growth))
async def set_growth(message: types.Message, state: FSMContext):
    try:
        growth = int(message.text)
        if growth < 50 or growth > 250:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (50-250 —Å–º):")
            return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    await state.update_data(growth=growth)

    user_id = message.from_user.id
    user_last_data[user_id]['growth'] = growth

    await message.answer(MESSAGES['enter_weight'], parse_mode="HTML")
    await state.set_state(UserState.weight)


@dp.message(StateFilter(UserState.weight))
async def set_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight < 20 or weight > 300:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (20-300 –∫–≥):")
            return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    await state.update_data(weight=weight)

    user_id = message.from_user.id
    user_last_data[user_id]['weight'] = weight

    await message.answer(MESSAGES['choose_activity'], reply_markup=activity_keyboard, parse_mode="HTML")
    await state.set_state(UserState.activity)


@dp.callback_query(StateFilter(UserState.activity))
async def set_activity(call: types.CallbackQuery, state: FSMContext):
    activity_coefficient = float(call.data)
    await state.update_data(activity=activity_coefficient)
    await call.answer()

    data = await state.get_data()
    age = data.get('age')
    sex = data.get('sex')
    activity = data.get('activity')
    growth = data.get('growth')
    weight = data.get('weight')

    if all(param is not None for param in [age, sex, growth, weight, activity]):
        bmr = 10 * weight + 6.25 * growth - 5 * age + sex
        total_calories = bmr * activity
        Plus = total_calories * 1.20
        Minus = total_calories * 0.85

        await call.message.answer(f'''‚úÖ <b>–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üìä <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if sex == 5 else '–ñ–µ–Ω—Å–∫–∏–π'}
‚Ä¢ –†–æ—Å—Ç: {growth} —Å–º
‚Ä¢ –í–µ—Å: {weight} –∫–≥
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity}
üî• <b>–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {total_calories:.0f} –∫–∫–∞–ª</b>''', parse_mode="HTML")
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=formulasses)

        await state.update_data(
            total_calories=total_calories,
            plus_calories=Plus,
            minus_calories=Minus
        )
    else:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.')

    await state.set_state(None)


@dp.callback_query(F.data == 'minus')
async def handle_minus(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    minus_calories = data.get('minus_calories', 0)
    await call.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ—Ö—É–¥–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 15-20%. –í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ {minus_calories:.0f}")
    await call.answer()


@dp.callback_query(F.data == 'plus')
async def handle_plus(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    plus_calories = data.get('plus_calories', 0)
    await call.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 10-20%. –í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ {plus_calories:.0f}")
    await call.answer()


@dp.callback_query(F.data == 'nolik')
async def handle_nolik(call: types.CallbackQuery):
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π.")
    await call.answer()


@dp.message(F.text == '–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ö–æ–¥–∞')
async def exercise(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
    await state.set_state(RegistrationExercise.name_exercise)


@dp.message(StateFilter(RegistrationExercise.name_exercise))
async def set_exer(message: types.Message, state: FSMContext):
    name_exercise = message.text
    bool_name = exercise_exists(name_exercise)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    if bool_name:
        await message.reply(
            '–¢–∞–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏? —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö".')
    else:
        await state.update_data(name_exercise=name_exercise)
        await state.set_state(RegistrationExercise.working_weight)
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π –≤–µ—Å:")


@dp.message(StateFilter(RegistrationExercise.working_weight))
async def set_working_weight(message: types.Message, state: FSMContext):
    try:
        working_weight = float(message.text)
        if working_weight < 0 or working_weight > 1000:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (0-1000 –∫–≥):")
            return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    await state.update_data(working_weight=working_weight)
    await state.set_state(RegistrationExercise.iteration)
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")


@dp.message(StateFilter(RegistrationExercise.iteration))
async def set_iteration(message: types.Message, state: FSMContext):
    try:
        iteration = int(message.text)
        if iteration < 0 or iteration > 1000:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (0-1000):")
            return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    data = await state.get_data()
    name_exercise = data.get('name_exercise')
    working_weight = data.get('working_weight')
    add_exercise(name_exercise, working_weight, iteration)

    await message.reply(
        "–ù—É –ø–æ—Å–ª–µ —Ç–∞–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –≤–∞—Å —Ç—Ä—É–¥–Ω–æ –Ω–µ –ø–æ—Ö–≤–∞–ª–∏—Ç—å, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à–∞ —Ü–µ–ª—å –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∫—Ä–∞—Å–∏–≤–æ–µ —Ç–µ–ª–æüòâ")
    await state.clear()



@dp.message(F.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def show_profile(message: types.Message):
    user_data = get_user_data(message.from_user.id)

    if user_data:
        profile_text = f"""üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>

üÜî ID: {message.from_user.id}
üìù –ò–º—è: {user_data['username']}
üìß Email: {user_data['email']}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç

/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""

        await message.answer(profile_text, reply_markup=profile_keyboard, parse_mode="HTML")
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")


@dp.callback_query(F.data.startswith("edit_"))
async def edit_profile_callback(call: types.CallbackQuery, state: FSMContext):
    action = call.data.split("_")[1]

    if action == "username":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await state.set_state(RegistrationState.username)
    elif action == "email":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
        await state.set_state(RegistrationState.email)
    elif action == "age":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(RegistrationState.age)
    elif action == "main_menu":
        await call.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb)

    await call.answer()


@dp.message(StateFilter(RegistrationState.username))
async def update_username(message: types.Message, state: FSMContext):
    username = message.text
    is_valid, error_msg = is_valid_username(username)
    if not is_valid:
        await message.reply(error_msg, parse_mode="HTML")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE Users SET username = ? WHERE telegram_id = ?",
                       (username, message.from_user.id))
        conn.commit()
        await message.reply(f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {username}")
    finally:
        conn.close()
    await state.clear()


@dp.message(StateFilter(RegistrationState.email))
async def update_email(message: types.Message, state: FSMContext):
    email = message.text
    is_valid, error_msg = is_valid_email(email)
    if not is_valid:
        await message.reply(error_msg, parse_mode="HTML")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE Users SET email = ? WHERE telegram_id = ?",
                       (email, message.from_user.id))
        conn.commit()
        await message.reply(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {email}")
    finally:
        conn.close()
    await state.clear()


@dp.message(StateFilter(RegistrationState.age))
async def update_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 0 or age > 150:
            await message.reply(MESSAGES["age_fail"], parse_mode="HTML")
            return
    except ValueError:
        await message.reply(MESSAGES["invalid_number"], parse_mode="HTML")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE Users SET age = ? WHERE telegram_id = ?",
                       (age, message.from_user.id))
        conn.commit()
        await message.reply(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {age}")
    finally:
        conn.close()
    await state.clear()

def is_russian_profanity(text: str) -> bool:
    text_lower = text.lower()
    for word in forbidden_words:
        if word in text_lower:
            return True
    return False


def is_valid_username(username: str) -> tuple[bool, str]:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(username) < 2 or len(username) > 30:
        return False, "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–Ω–µ —Ü–∏—Ñ—Ä–∞)
    if username[0].isdigit():
        return False, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_-]+$', username):
        return False, "–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç —á–µ—Ä–µ–∑ better-profanity (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    if profanity.contains_profanity(username):
        return False, "–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –º–∞—Ç —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if is_russian_profanity(username):
        return False, "–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."

    return True, ""


def is_valid_email(email: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email:
    - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É email
    - –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, email):
        return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü—Ä–∏–º–µ—Ä: user@example.com"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ email
    email_lower = email.lower()
    for forbidden_word in forbidden_words:
        if forbidden_word in email_lower:
            return False, "Email —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç —á–µ—Ä–µ–∑ better-profanity (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    if profanity.contains_profanity(email):
        return False, "Email —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."

    return True, ""


@dp.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def information(message: types.Message):
    await message.answer('–ö–Ω–æ–ø–∫–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞')


@dp.message()
async def all_message(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
