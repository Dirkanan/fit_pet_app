from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from crud_functions import *
import asyncio
import aiogram

api = "7903285534:AAELmygqVRKdDzzjqZ0Ap2Dvu7m68jZKODs"
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())
kb = ReplyKeyboardMarkup(resize_keyboard=True)
button = KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
button2 = KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
button4 = KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
kb.add(button, button2)
kb.add(button4)
kb_line = InlineKeyboardMarkup()
button_line = InlineKeyboardButton(text = '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories')
button_line2 = InlineKeyboardButton(text = '–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')


class RegistrationState(StatesGroup):
    username = State()
    email = State()
    age = State()


@dp.message_handler(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def sing_up(message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):")
    await RegistrationState.username.set()

@dp.message_handler(state=RegistrationState.username)
async def set_username(message: types.Message, state: FSMContext):
    username = message.text
    bool_name = is_included(username)
    if bool_name is True:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:")
    else:
        await state.update_data(username=username)
        await RegistrationState.email.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:")


@dp.message_handler(state=RegistrationState.email)
async def set_email(message: types.Message, state: FSMContext):
    email = message.text
    await state.update_data(email=email)
    await RegistrationState.age.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")


@dp.message_handler(state=RegistrationState.age)
async def set_age(message: types.Message, state: FSMContext):
    age = message.text
    data = await state.get_data()
    username = data.get('username')
    email = data.get('email')
    add_user(username, email, age)
    await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    await state.finish()

class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()

@dp.message_handler(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
async def main_menu(message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb_line)

@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer("10 —Ö –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5")
    await call.answer ()



@dp.callback_query_handler(text='calories')
async def set_age(call):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await call.answer()
    await UserState.age.set()


@dp.message_handler(state=UserState.age)
async def set_growth(message: types.Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message: types.Message, state: FSMContext):
    await state.update_data(growth=int(message.text))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥:')
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def send_calories(message: types.Message, state: FSMContext):
    await state.update_data(weight=int(message.text))
    data = await state.get_data()
    age = data.get('age')
    growth = data.get('growth')
    weight = data.get('weight')
    bmr = 10 * weight + 6.25 * growth - 5 * age + 5
    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {bmr} –∫–∫–∞–ª –≤ –¥–µ–Ω—å.')
    await state.finish()

class RegistrationExercise (StatesGroup):
    name_exercise = State ()
    working_weight = State ()
    iteration = State ()

@dp.message_handler(text='–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ö–æ–¥–∞')
async def exercise(message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
    await RegistrationExercise.name_exercise.set()

@dp.message_handler(state=RegistrationExercise.name_exercise)
async def set_exer(message: types.Message, state: FSMContext):
    name_exercise = message.text
    bool_name = is_included(name_exercise)
    if bool_name is True:
        await message.reply('–¢–∞–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏? —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö".')
    else:
        await state.update_data(name_exercise=name_exercise)
        await RegistrationExercise.working_weight.set()
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π –≤–µ—Å:")

@dp.message_handler(state=RegistrationExercise.working_weight)
async def set_working_weight(message: types.Message, state: FSMContext):
    working_weight = message.text
    await state.update_data(working_weight=working_weight)
    await RegistrationExercise.iteration.set()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")

@dp.message_handler(state=RegistrationExercise.iterarion)
async def set_iteration(message: types.Message, state: FSMContext):
    iteration = message.text
    data = await state.get_data()
    name_exercise = data.get('name_exercise')
    working_weight = data.get('working_weight')
    add_exercise(name_exercise, working_weight, iteration)
    await message.reply("–ù—É –ø–æ—Å–ª–µ —Ç–∞–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –≤–∞—Å —Ç—Ä—É–¥–Ω–æ –Ω–µ –ø–æ—Ö–≤–∞–ª–∏—Ç—å, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à–∞ —Ü–µ–ª—å –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∫—Ä–∞—Å–∏–≤–æ–µ —Ç–µ–ª–æüòâ")
    await state.finish()

@dp.message_handler(commands=['start'])
async def start_commands(message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç",
                         reply_markup=kb)

@dp.message_handler(text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def information(message):
    await message.answer('–ö–Ω–æ–ø–∫–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞')

@dp.message_handler()
async def all_message(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
