# bot.py
import asyncio
import re
import matplotlib as mpl
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from better_profanity import profanity
from config import BOT_TOKEN
from crud_functions import *
from keyboards.inline_keyboards import activity_keyboard, formulasses, kb_line, profile_keyboard
from keyboards.reply_keyboards import kb, kb_registered
from states.user_states import RegistrationExercise, RegistrationState, UserState
from utils.bad_words import forbidden_words
from utils.messages import MESSAGES

mpl.use('Agg')
BOT_TOKEN_ERROR_MSG_BOT = "BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env"
if not BOT_TOKEN:
    raise ValueError(BOT_TOKEN_ERROR_MSG_BOT)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

user_last_data = {}


@dp.message(Command(commands=['start']))
async def start_commands(message: types.Message):
    # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if user_exists(message.from_user.id):
        await message.answer(MESSAGES["start"], reply_markup=kb_registered, parse_mode="HTML")
    else:
        await message.answer(MESSAGES["start"], reply_markup=kb, parse_mode="HTML")


@dp.message(F.text == 'üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def sing_up(message: types.Message, state: FSMContext):
    if user_exists(message.from_user.id):
        await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    await message.answer(MESSAGES["registration_start"], parse_mode="HTML")
    await state.set_state(RegistrationState.username)


@dp.message(StateFilter(RegistrationState.username))
async def set_username(message: types.Message, state: FSMContext):
    username = message.text

    is_valid, error_msg = is_valid_username(username)
    if not is_valid:
        await message.reply(error_msg, parse_mode="HTML")
        return

    bool_name = is_included(username)
    if bool_name:
        await message.reply(MESSAGES["user_exists"], parse_mode="HTML")
        return

    await state.update_data(username=username)
    await state.set_state(RegistrationState.email)
    await message.reply(MESSAGES["enter_email"], parse_mode="HTML")


@dp.message(StateFilter(RegistrationState.email))
async def set_email(message: types.Message, state: FSMContext):
    email = message.text
    is_valid, error_msg = is_valid_email(email)
    if not is_valid:
        await message.reply(error_msg, parse_mode="HTML")
        return
    await state.update_data(email=email)
    await state.set_state(RegistrationState.age)
    await message.reply(MESSAGES["enter_age"], parse_mode="HTML")


@dp.message(StateFilter(RegistrationState.age))
async def set_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 0 or age > 150:
            await message.reply(MESSAGES["age_fail"], parse_mode="HTML")
            return
    except ValueError:
        await message.reply(MESSAGES["invalid_number"], parse_mode="HTML")
        return

    data = await state.get_data()
    username = data.get('username')
    email = data.get('email')
    telegram_id = message.from_user.id
    add_user(username, email, age, telegram_id)
    await message.reply(MESSAGES["registration_success"], parse_mode="HTML")
    await message.answer(MESSAGES["start"], reply_markup=kb_registered, parse_mode="HTML")
    await state.clear()


@dp.message(F.text == 'üßÆ –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å')
async def main_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb_line, parse_mode="HTML")


@dp.callback_query(F.data == 'calories')
async def calories_callback(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(MESSAGES["calorie_calc_start"], parse_mode="HTML")
    await call.answer()
    await state.set_state(UserState.age)


@dp.callback_query(F.data == 'formulas')
async def get_formulas(call: types.CallbackQuery):
    await call.message.answer(MESSAGES["formulas"], parse_mode="HTML")
    await call.answer()


@dp.message(StateFilter(UserState.age))
async def set_age_for_calories(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 0 or age > 150:
            await message.reply(MESSAGES["age_fail"], parse_mode="HTML")
            return
    except ValueError:
        await message.reply(MESSAGES["invalid_number"], parse_mode="HTML")
        return

    await state.update_data(age=age)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    if user_id not in user_last_data:
        user_last_data[user_id] = {}
    user_last_data[user_id]['age'] = age

    await message.answer(MESSAGES['enter_gender'], parse_mode="HTML")
    await state.set_state(UserState.sex)


@dp.message(StateFilter(UserState.sex))
async def set_sex(message: types.Message, state: FSMContext):
    try:
        sex_input = int(message.text)
        if sex_input not in [1, 2]:
            await message.reply(MESSAGES['enter_gender'], parse_mode="HTML")
            return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2:")
        return

    sex_value = 5 if sex_input == 1 else -161
    await state.update_data(sex=sex_value)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    user_last_data[user_id]['sex'] = '–ú—É–∂—Å–∫–æ–π' if sex_value == 5 else '–ñ–µ–Ω—Å–∫–∏–π'

    await message.answer(MESSAGES['enter_height'], parse_mode="HTML")
    await state.set_state(UserState.growth)


@dp.message(StateFilter(UserState.growth))
async def set_growth(message: types.Message, state: FSMContext):
    try:
        growth = int(message.text)
        if growth < 50 or growth > 250:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (50-250 —Å–º):")
            return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    await state.update_data(growth=growth)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Å—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    user_last_data[user_id]['growth'] = growth

    await message.answer(MESSAGES['enter_weight'], parse_mode="HTML")
    await state.set_state(UserState.weight)


@dp.message(StateFilter(UserState.weight))
async def set_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight < 20 or weight > 300:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (20-300 –∫–≥):")
            return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    await state.update_data(weight=weight)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    user_last_data[user_id]['weight'] = weight

    await message.answer(MESSAGES['choose_activity'], reply_markup=activity_keyboard, parse_mode="HTML")
    await state.set_state(UserState.activity)


@dp.callback_query(StateFilter(UserState.activity))
async def set_activity(call: types.CallbackQuery, state: FSMContext):
    activity_coefficient = float(call.data)
    await state.update_data(activity=activity_coefficient)
    await call.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–∞—Å—á–µ—Ç
    data = await state.get_data()
    age = data.get('age')
    sex = data.get('sex')
    activity = data.get('activity')
    growth = data.get('growth')
    weight = data.get('weight')

    if all(param is not None for param in [age, sex, growth, weight, activity]):
        bmr = 10 * weight + 6.25 * growth - 5 * age + sex
        total_calories = bmr * activity
        Plus = total_calories * 1.20
        Minus = total_calories * 0.85

        await call.message.answer(f'''‚úÖ <b>–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üìä <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if sex == 5 else '–ñ–µ–Ω—Å–∫–∏–π'}
‚Ä¢ –†–æ—Å—Ç: {growth} —Å–º
‚Ä¢ –í–µ—Å: {weight} –∫–≥
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity}
üî• <b>–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {total_calories:.0f} –∫–∫–∞–ª</b>''', parse_mode="HTML")
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=formulasses)

        await state.update_data(
            total_calories=total_calories,
            plus_calories=Plus,
            minus_calories=Minus
        )
    else:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.')

    await state.set_state(None)


@dp.callback_query(F.data == 'minus')
async def handle_minus(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    minus_calories = data.get('minus_calories', 0)
    await call.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ—Ö—É–¥–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 15-20%. –í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ {minus_calories:.0f}")
    await call.answer()


@dp.callback_query(F.data == 'plus')
async def handle_plus(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    plus_calories = data.get('plus_calories', 0)
    await call.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 10-20%. –í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ {plus_calories:.0f}")
    await call.answer()


@dp.callback_query(F.data == 'nolik')
async def handle_nolik(call: types.CallbackQuery):
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π.")
    await call.answer()


# –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–¥—Ö–æ–¥–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ telegram_id
@dp.message(F.text == 'üí™ –ü–æ–¥—Ö–æ–¥')
async def exercise(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(telegram_id=user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
    await state.set_state(RegistrationExercise.name_exercise)


@dp.message(StateFilter(RegistrationExercise.name_exercise))
async def set_exer(message: types.Message, state: FSMContext):
    name_exercise = message.text
    data = await state.get_data()
    user_id = data.get('telegram_id')  # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if exercise_exists(name_exercise, user_id):
        await message.reply(
            '–¢–∞–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –≤–∞—Å. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? (–¥–∞/–Ω–µ—Ç)')
        await state.update_data(name_exercise=name_exercise)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.set_state(RegistrationExercise.confirm_update)
    else:
        await state.update_data(name_exercise=name_exercise)
        await state.set_state(RegistrationExercise.working_weight)
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π –≤–µ—Å:")


# –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@dp.message(StateFilter(RegistrationExercise.confirm_update))
async def confirm_update(message: types.Message, state: FSMContext):
    response = message.text.lower()
    data = await state.get_data()
    name_exercise = data.get('name_exercise')
    user_id = data.get('telegram_id')

    if response in ['–¥–∞', 'yes', '–æ–±–Ω–æ–≤–∏—Ç—å']:
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –≤–µ—Å:")
        await state.set_state(RegistrationExercise.working_weight)
    elif response in ['–Ω–µ—Ç', 'no', '–Ω–æ–≤–æ–µ']:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        await state.set_state(RegistrationExercise.name_exercise)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç':")


@dp.message(StateFilter(RegistrationExercise.working_weight))
async def set_working_weight(message: types.Message, state: FSMContext):
    try:
        working_weight = float(message.text)
        if working_weight < 0 or working_weight > 1000:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (0-1000 –∫–≥):")
            return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    await state.update_data(working_weight=working_weight)
    await state.set_state(RegistrationExercise.iteration)
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")


@dp.message(StateFilter(RegistrationExercise.iteration))
async def set_iteration(message: types.Message, state: FSMContext):
    try:
        iteration = int(message.text)
        if iteration < 0 or iteration > 1000:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (0-1000):")
            return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    data = await state.get_data()
    name_exercise = data.get('name_exercise')
    working_weight = data.get('working_weight')
    user_id = data.get('telegram_id')  # –ü–æ–ª—É—á–∞–µ–º telegram_id –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏

    # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ—à–∞–µ–º: –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å
    if exercise_exists(name_exercise, user_id):
        update_exercise(name_exercise, working_weight, iteration, user_id)
        await message.reply(
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è '{name_exercise}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
            f"üèãÔ∏è –í–µ—Å: {working_weight} –∫–≥ | üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {iteration}")
    else:
        add_exercise(name_exercise, working_weight, iteration, user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º telegram_id
        await message.reply(
            f"‚úÖ –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∑–∞–ø–∏—Å–∞–Ω!\n"
            f"üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {name_exercise}\n"
            f"üèãÔ∏è –í–µ—Å: {working_weight} –∫–≥ | üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {iteration}")

    await state.clear()


@dp.message(F.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def show_profile(message: types.Message):
    user_data = get_user_data(message.from_user.id)

    if user_data:  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–≤–æ–µ—Ç–æ—á–∏–µ
        profile_text = f"""üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>

üÜî ID: {message.from_user.id}
üìù –ò–º—è: {user_data['username']}
üìß Email: {user_data['email']}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç

/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""

        await message.answer(profile_text, reply_markup=profile_keyboard, parse_mode="HTML")
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")


@dp.callback_query(F.data.startswith("edit_"))
async def edit_profile_callback(call: types.CallbackQuery, state: FSMContext):
    action = call.data.split("_")[1]

    if action == "username":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await state.set_state(RegistrationState.username)
    elif action == "email":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
        await state.set_state(RegistrationState.email)
    elif action == "age":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(RegistrationState.age)
    elif action == "main_menu":
        await call.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb)

    await call.answer()


@dp.message(StateFilter(RegistrationState.username))
async def update_username(message: types.Message, state: FSMContext):
    username = message.text
    is_valid, error_msg = is_valid_username(username)
    if not is_valid:
        await message.reply(error_msg, parse_mode="HTML")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE Users SET username = ? WHERE telegram_id = ?",
                       (username, message.from_user.id))
        conn.commit()
        await message.reply(f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {username}")
    finally:
        conn.close()
    await state.clear()


@dp.message(StateFilter(RegistrationState.email))
async def update_email(message: types.Message, state: FSMContext):
    email = message.text
    is_valid, error_msg = is_valid_email(email)
    if not is_valid:
        await message.reply(error_msg, parse_mode="HTML")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE Users SET email = ? WHERE telegram_id = ?",
                       (email, message.from_user.id))
        conn.commit()
        await message.reply(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {email}")
    finally:
        conn.close()
    await state.clear()


@dp.message(StateFilter(RegistrationState.age))
async def update_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 0 or age > 150:
            await message.reply(MESSAGES["age_fail"], parse_mode="HTML")
            return
    except ValueError:
        await message.reply(MESSAGES["invalid_number"], parse_mode="HTML")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE Users SET age = ? WHERE telegram_id = ?",
                       (age, message.from_user.id))
        conn.commit()
        await message.reply(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {age}")
    finally:
        conn.close()
    await state.clear()


# –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@dp.message(Command(commands=['progress']))
async def show_progress_options(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    exercises = get_all_user_exercises(message.from_user.id)

    if not exercises:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for exercise in exercises:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=exercise, callback_data=f"progress_{exercise}")
        ])

    await message.answer("üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:</b>",
                         reply_markup=keyboard, parse_mode="HTML")


@dp.callback_query(F.data.startswith("progress_"))
async def show_exercise_progress(call: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    exercise_name = call.data.split("_", 1)[1]
    user_id = call.from_user.id

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    chart_buffer = generate_progress_chart(exercise_name, user_id)

    if chart_buffer:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart_buffer.name = f"progress_{exercise_name}.png"
        photo = types.input_file.BufferedInputFile(chart_buffer.read(), filename=f"progress_{exercise_name}.png")
        await call.message.answer_photo(photo=photo, caption=f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é: <b>{exercise_name}</b>",
                                        parse_mode="HTML")

        # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        progress_data = get_exercise_progress(exercise_name, user_id)
        if progress_data:
            first_weight = progress_data[0][0]
            last_weight = progress_data[-1][0]
            improvement = last_weight - first_weight

            stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ {exercise_name}:</b>

üìà –ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å: {first_weight} –∫–≥
üéØ –¢–µ–∫—É—â–∏–π –≤–µ—Å: {last_weight} –∫–≥
‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: {improvement:+.1f} –∫–≥

"""
            if improvement > 0:
                stats_text += "üéâ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –í—ã –ø—Ä–∏–±–∞–≤–∏–ª–∏ –≤ —Å–∏–ª–µ!"
            elif improvement == 0:
                stats_text += "üí™ –í—ã –¥–µ—Ä–∂–∏—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–µ—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            else:
                stats_text += "üí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏."

            await call.message.answer(stats_text, parse_mode="HTML")
    else:
        await call.message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é: {exercise_name}")

    await call.answer()


@dp.message(Command(commands=['all_progress']))
async def show_all_progress(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º"""
    exercises = get_all_user_exercises(message.from_user.id)

    if not exercises:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        return

    progress_text = "üìä <b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º:</b>\n\n"

    for exercise in exercises:
        progress_data = get_exercise_progress(exercise, message.from_user.id, limit=10)
        if progress_data:
            first_weight = progress_data[0][0]
            last_weight = progress_data[-1][0]
            improvement = last_weight - first_weight

            progress_text += f"<b>{exercise}:</b>\n"
            progress_text += f"   üìà –û—Ç {first_weight} –∫–≥ –¥–æ {last_weight} –∫–≥\n"
            progress_text += f"   ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: {improvement:+.1f} –∫–≥\n\n"

    await message.answer(progress_text, parse_mode="HTML")


def is_russian_profanity(text: str) -> bool:
    text_lower = text.lower()
    for word in forbidden_words:
        if word in text_lower:
            return True
    return False


def is_valid_username(username: str) -> tuple[bool, str]:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(username) < 2 or len(username) > 30:
        return False, "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–Ω–µ —Ü–∏—Ñ—Ä–∞)
    if username[0].isdigit():
        return False, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_-]+$', username):
        return False, "–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç —á–µ—Ä–µ–∑ better-profanity (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    if profanity.contains_profanity(username):
        return False, "–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –º–∞—Ç —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if is_russian_profanity(username):
        return False, "–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."

    return True, ""


def is_valid_email(email: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email:
    - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É email
    - He —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, email):
        return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü—Ä–∏–º–µ—Ä: user@example.com"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ email
    email_lower = email.lower()
    for forbidden_word in forbidden_words:
        if forbidden_word in email_lower:
            return False, "Email —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç —á–µ—Ä–µ–∑ better-profanity (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    if profanity.contains_profanity(email):
        return False, "Email —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."

    return True, ""


@dp.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def information(message: types.Message):
    await message.answer('–ö–Ω–æ–ø–∫–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞')


@dp.message()
async def all_message(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
